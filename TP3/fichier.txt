Ho you’ll see later in this part’s chapters, there are objects and operations that
perform in-place object changes. For instance, an assignment to an offset in a list
actually changes the list object itself in-place, rather than generating a brand new list
object. For objects that support such in-place changes, you need to be more aware of
shared references, since a change from one name may impact others.
To further illustrate, let’s take another look at the list objects introduced in
Chapter 4. Recall that lists, which do support in-place assignments to positions, are
simply collections of other objects, coded in square brackets:
This string spans three lines (in some interfaces, the interactive prompt changes to ...
on continuation lines; IDLE simply drops down one line). Python collects all the tri-
ple-quoted text into a single multiline string, with embedded newline characters (\n)
at the places where your code has line breaks. Notice that, as in the literal, the second
line in the result has a leading space, but the third does not—what you type is truly
what you get.
Triple-quoted strings are useful any time you need multiline text in your program;
for example, to embed multiline error messages or HTML or XML code in your
source code files. You can embed such blocks directly in your scripts without resort-
ing to external text files, or explicit concatenation and newline characters.
Triple-quoted strings are also commonly used for documentation strings, which are
string literals that are taken as comments when they appear at specific points in your
file (more on these later in the book). These don’t have to be triple-quoted blocks,
but they usually are to allow for multiline comments.
Finally, triple-quoted strings are also often used as a horribly hackish way to tempo-
rarily disable lines of code during development (OK, it’s not really too horrible, and
it’s actually a fairly common practice). If you wish to turn off a few lines of code and
run your script again, simply put three quotes above and below them, like this:

